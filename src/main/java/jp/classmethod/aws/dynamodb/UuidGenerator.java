package jp.classmethod.aws.dynamodb;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

import lombok.experimental.UtilityClass;

import com.fasterxml.uuid.Generators;
import com.fasterxml.uuid.UUIDType;
import com.fasterxml.uuid.impl.NameBasedGenerator;
import com.fasterxml.uuid.impl.TimeBasedGenerator;

/**
 * UUID generator utility.
 *
 * <p>Java standard {@link UUID} does not support to generate UUID version 1 or 5.</p>
 *
 * @author daisuke
 * @since #version#
 * @see UUID
 */
@UtilityClass
public class UuidGenerator {

	private static TimeBasedGenerator v1Generator;

	private static NameBasedGenerator v5Generator;

	private static NameBasedGenerator sha256PseudoGenerator;

	private static final MessageDigest SHA256_DIGESTER;

	static {
		try {
			SHA256_DIGESTER = MessageDigest.getInstance("SHA-256");
		} catch (NoSuchAlgorithmException e) {
			throw new Error("Couldn't instantiate SHA-256 MessageDigest instance", e);
		}
		initialize();
	}


	/**
	 * Initialize this utility.
	 *
	 * @since #version#
	 */
	public static void initialize() {
		v1Generator = Generators.timeBasedGenerator();
		v5Generator = Generators.nameBasedGenerator();
		sha256PseudoGenerator = new NameBasedGenerator(null, SHA256_DIGESTER, UUIDType.UNKNOWN);
	}

	/**
	 * Generate UUID for model identifier.
	 * <p>
	 * <p>Version of UUID which this method generates is concealed.
	 * There is no guarantee to generate same version in each generation.</p>
	 *
	 * @return UUID
	 * @since #version#
	 */
	public static UUID generateModelId() {
		return generateV1();
	}

	/**
	 * Generate UUID version 1 (time and location based).
	 *
	 * @return UUID v1
	 * @throws NullPointerException if the argument is {@code null}
	 * @since #version#
	 */
	public static UUID generateV1() {
		return v1Generator.generate();
	}

	/**
	 * Generate UUID version 3 (name and MD-5 based).
	 *
	 * @param name name
	 * @return UUID v3
	 * @throws NullPointerException if the argument is {@code null}
	 * @since #version#
	 */
	public static UUID generateV3(byte[] name) {
		return UUID.nameUUIDFromBytes(name);
	}

	/**
	 * Generate UUID version 4 (random based).
	 *
	 * @return UUID v4
	 * @throws NullPointerException if the argument is {@code null}
	 * @since #version#
	 */
	public static UUID generateV4() {
		return UUID.randomUUID();
	}

	/**
	 * Generate UUID version 5 (name and SHA-1 based).
	 *
	 * @param name name
	 * @return UUID v5
	 * @throws NullPointerException if the argument is {@code null}
	 * @since #version#
	 */
	public static UUID generateV5(byte[] name) {
		return v5Generator.generate(name);
	}

	/**
	 * Generate pseudo-UUID (name and SHA-256 based).
	 * <p>
	 * <p>
	 * <p>UUID using SHA-256 digester does not described in RFC 4122 UUID spec.
	 * This is custom implementation based on existing version 3 and 5 specification.
	 * As a consequence UUID generated by this method does NOT meet RFC specification.</p>
	 *
	 * @param name name
	 * @return pseudo-UUID
	 * @throws NullPointerException if the argument is {@code null}
	 * @since #version#
	 */
	public static UUID generatePseudoSHA256(byte[] name) {
		return sha256PseudoGenerator.generate(name);
	}
}